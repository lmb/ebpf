// Code generated by internal/cmd/gensections.awk; DO NOT EDIT.

package ebpf

// Code in this file is derived from libbpf, available under BSD-2-Clause.

import "github.com/cilium/ebpf/internal/linux"

var elfSectionDefs = []libbpfElfSectionDef{
	{"socket", linux.BPF_PROG_TYPE_SOCKET_FILTER, 0, _SEC_NONE},
	{"sk_reuseport/migrate", linux.BPF_PROG_TYPE_SK_REUSEPORT, linux.BPF_SK_REUSEPORT_SELECT_OR_MIGRATE, _SEC_ATTACHABLE},
	{"sk_reuseport", linux.BPF_PROG_TYPE_SK_REUSEPORT, linux.BPF_SK_REUSEPORT_SELECT, _SEC_ATTACHABLE},
	{"kprobe+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_NONE},
	{"uprobe+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_NONE},
	{"uprobe.s+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_SLEEPABLE},
	{"kretprobe+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_NONE},
	{"uretprobe+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_NONE},
	{"uretprobe.s+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_SLEEPABLE},
	{"kprobe.multi+", linux.BPF_PROG_TYPE_KPROBE, linux.BPF_TRACE_KPROBE_MULTI, _SEC_NONE},
	{"kretprobe.multi+", linux.BPF_PROG_TYPE_KPROBE, linux.BPF_TRACE_KPROBE_MULTI, _SEC_NONE},
	{"uprobe.multi+", linux.BPF_PROG_TYPE_KPROBE, linux.BPF_TRACE_UPROBE_MULTI, _SEC_NONE},
	{"uretprobe.multi+", linux.BPF_PROG_TYPE_KPROBE, linux.BPF_TRACE_UPROBE_MULTI, _SEC_NONE},
	{"uprobe.multi.s+", linux.BPF_PROG_TYPE_KPROBE, linux.BPF_TRACE_UPROBE_MULTI, _SEC_SLEEPABLE},
	{"uretprobe.multi.s+", linux.BPF_PROG_TYPE_KPROBE, linux.BPF_TRACE_UPROBE_MULTI, _SEC_SLEEPABLE},
	{"ksyscall+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_NONE},
	{"kretsyscall+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_NONE},
	{"usdt+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_USDT},
	{"usdt.s+", linux.BPF_PROG_TYPE_KPROBE, 0, _SEC_USDT | _SEC_SLEEPABLE},
	{"tc/ingress", linux.BPF_PROG_TYPE_SCHED_CLS, linux.BPF_TCX_INGRESS, _SEC_NONE},
	{"tc/egress", linux.BPF_PROG_TYPE_SCHED_CLS, linux.BPF_TCX_EGRESS, _SEC_NONE},
	{"tcx/ingress", linux.BPF_PROG_TYPE_SCHED_CLS, linux.BPF_TCX_INGRESS, _SEC_NONE},
	{"tcx/egress", linux.BPF_PROG_TYPE_SCHED_CLS, linux.BPF_TCX_EGRESS, _SEC_NONE},
	{"tc", linux.BPF_PROG_TYPE_SCHED_CLS, 0, _SEC_NONE},
	{"classifier", linux.BPF_PROG_TYPE_SCHED_CLS, 0, _SEC_NONE},
	{"action", linux.BPF_PROG_TYPE_SCHED_ACT, 0, _SEC_NONE},
	{"netkit/primary", linux.BPF_PROG_TYPE_SCHED_CLS, linux.BPF_NETKIT_PRIMARY, _SEC_NONE},
	{"netkit/peer", linux.BPF_PROG_TYPE_SCHED_CLS, linux.BPF_NETKIT_PEER, _SEC_NONE},
	{"tracepoint+", linux.BPF_PROG_TYPE_TRACEPOINT, 0, _SEC_NONE},
	{"tp+", linux.BPF_PROG_TYPE_TRACEPOINT, 0, _SEC_NONE},
	{"raw_tracepoint+", linux.BPF_PROG_TYPE_RAW_TRACEPOINT, 0, _SEC_NONE},
	{"raw_tp+", linux.BPF_PROG_TYPE_RAW_TRACEPOINT, 0, _SEC_NONE},
	{"raw_tracepoint.w+", linux.BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE, 0, _SEC_NONE},
	{"raw_tp.w+", linux.BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE, 0, _SEC_NONE},
	{"tp_btf+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_TRACE_RAW_TP, _SEC_ATTACH_BTF},
	{"fentry+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_TRACE_FENTRY, _SEC_ATTACH_BTF},
	{"fmod_ret+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_MODIFY_RETURN, _SEC_ATTACH_BTF},
	{"fexit+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_TRACE_FEXIT, _SEC_ATTACH_BTF},
	{"fentry.s+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_TRACE_FENTRY, _SEC_ATTACH_BTF | _SEC_SLEEPABLE},
	{"fmod_ret.s+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_MODIFY_RETURN, _SEC_ATTACH_BTF | _SEC_SLEEPABLE},
	{"fexit.s+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_TRACE_FEXIT, _SEC_ATTACH_BTF | _SEC_SLEEPABLE},
	{"freplace+", linux.BPF_PROG_TYPE_EXT, 0, _SEC_ATTACH_BTF},
	{"lsm+", linux.BPF_PROG_TYPE_LSM, linux.BPF_LSM_MAC, _SEC_ATTACH_BTF},
	{"lsm.s+", linux.BPF_PROG_TYPE_LSM, linux.BPF_LSM_MAC, _SEC_ATTACH_BTF | _SEC_SLEEPABLE},
	{"lsm_cgroup+", linux.BPF_PROG_TYPE_LSM, linux.BPF_LSM_CGROUP, _SEC_ATTACH_BTF},
	{"iter+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_TRACE_ITER, _SEC_ATTACH_BTF},
	{"iter.s+", linux.BPF_PROG_TYPE_TRACING, linux.BPF_TRACE_ITER, _SEC_ATTACH_BTF | _SEC_SLEEPABLE},
	{"syscall", linux.BPF_PROG_TYPE_SYSCALL, 0, _SEC_SLEEPABLE},
	{"xdp.frags/devmap", linux.BPF_PROG_TYPE_XDP, linux.BPF_XDP_DEVMAP, _SEC_XDP_FRAGS},
	{"xdp/devmap", linux.BPF_PROG_TYPE_XDP, linux.BPF_XDP_DEVMAP, _SEC_ATTACHABLE},
	{"xdp.frags/cpumap", linux.BPF_PROG_TYPE_XDP, linux.BPF_XDP_CPUMAP, _SEC_XDP_FRAGS},
	{"xdp/cpumap", linux.BPF_PROG_TYPE_XDP, linux.BPF_XDP_CPUMAP, _SEC_ATTACHABLE},
	{"xdp.frags", linux.BPF_PROG_TYPE_XDP, linux.BPF_XDP, _SEC_XDP_FRAGS},
	{"xdp", linux.BPF_PROG_TYPE_XDP, linux.BPF_XDP, _SEC_ATTACHABLE_OPT},
	{"perf_event", linux.BPF_PROG_TYPE_PERF_EVENT, 0, _SEC_NONE},
	{"lwt_in", linux.BPF_PROG_TYPE_LWT_IN, 0, _SEC_NONE},
	{"lwt_out", linux.BPF_PROG_TYPE_LWT_OUT, 0, _SEC_NONE},
	{"lwt_xmit", linux.BPF_PROG_TYPE_LWT_XMIT, 0, _SEC_NONE},
	{"lwt_seg6local", linux.BPF_PROG_TYPE_LWT_SEG6LOCAL, 0, _SEC_NONE},
	{"sockops", linux.BPF_PROG_TYPE_SOCK_OPS, linux.BPF_CGROUP_SOCK_OPS, _SEC_ATTACHABLE_OPT},
	{"sk_skb/stream_parser", linux.BPF_PROG_TYPE_SK_SKB, linux.BPF_SK_SKB_STREAM_PARSER, _SEC_ATTACHABLE_OPT},
	{"sk_skb/stream_verdict", linux.BPF_PROG_TYPE_SK_SKB, linux.BPF_SK_SKB_STREAM_VERDICT, _SEC_ATTACHABLE_OPT},
	{"sk_skb", linux.BPF_PROG_TYPE_SK_SKB, 0, _SEC_NONE},
	{"sk_msg", linux.BPF_PROG_TYPE_SK_MSG, linux.BPF_SK_MSG_VERDICT, _SEC_ATTACHABLE_OPT},
	{"lirc_mode2", linux.BPF_PROG_TYPE_LIRC_MODE2, linux.BPF_LIRC_MODE2, _SEC_ATTACHABLE_OPT},
	{"flow_dissector", linux.BPF_PROG_TYPE_FLOW_DISSECTOR, linux.BPF_FLOW_DISSECTOR, _SEC_ATTACHABLE_OPT},
	{"cgroup_skb/ingress", linux.BPF_PROG_TYPE_CGROUP_SKB, linux.BPF_CGROUP_INET_INGRESS, _SEC_ATTACHABLE_OPT},
	{"cgroup_skb/egress", linux.BPF_PROG_TYPE_CGROUP_SKB, linux.BPF_CGROUP_INET_EGRESS, _SEC_ATTACHABLE_OPT},
	{"cgroup/skb", linux.BPF_PROG_TYPE_CGROUP_SKB, 0, _SEC_NONE},
	{"cgroup/sock_create", linux.BPF_PROG_TYPE_CGROUP_SOCK, linux.BPF_CGROUP_INET_SOCK_CREATE, _SEC_ATTACHABLE},
	{"cgroup/sock_release", linux.BPF_PROG_TYPE_CGROUP_SOCK, linux.BPF_CGROUP_INET_SOCK_RELEASE, _SEC_ATTACHABLE},
	{"cgroup/sock", linux.BPF_PROG_TYPE_CGROUP_SOCK, linux.BPF_CGROUP_INET_SOCK_CREATE, _SEC_ATTACHABLE_OPT},
	{"cgroup/post_bind4", linux.BPF_PROG_TYPE_CGROUP_SOCK, linux.BPF_CGROUP_INET4_POST_BIND, _SEC_ATTACHABLE},
	{"cgroup/post_bind6", linux.BPF_PROG_TYPE_CGROUP_SOCK, linux.BPF_CGROUP_INET6_POST_BIND, _SEC_ATTACHABLE},
	{"cgroup/bind4", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET4_BIND, _SEC_ATTACHABLE},
	{"cgroup/bind6", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET6_BIND, _SEC_ATTACHABLE},
	{"cgroup/connect4", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET4_CONNECT, _SEC_ATTACHABLE},
	{"cgroup/connect6", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET6_CONNECT, _SEC_ATTACHABLE},
	{"cgroup/connect_unix", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UNIX_CONNECT, _SEC_ATTACHABLE},
	{"cgroup/sendmsg4", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UDP4_SENDMSG, _SEC_ATTACHABLE},
	{"cgroup/sendmsg6", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UDP6_SENDMSG, _SEC_ATTACHABLE},
	{"cgroup/sendmsg_unix", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UNIX_SENDMSG, _SEC_ATTACHABLE},
	{"cgroup/recvmsg4", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UDP4_RECVMSG, _SEC_ATTACHABLE},
	{"cgroup/recvmsg6", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UDP6_RECVMSG, _SEC_ATTACHABLE},
	{"cgroup/recvmsg_unix", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UNIX_RECVMSG, _SEC_ATTACHABLE},
	{"cgroup/getpeername4", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET4_GETPEERNAME, _SEC_ATTACHABLE},
	{"cgroup/getpeername6", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET6_GETPEERNAME, _SEC_ATTACHABLE},
	{"cgroup/getpeername_unix", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UNIX_GETPEERNAME, _SEC_ATTACHABLE},
	{"cgroup/getsockname4", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET4_GETSOCKNAME, _SEC_ATTACHABLE},
	{"cgroup/getsockname6", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_INET6_GETSOCKNAME, _SEC_ATTACHABLE},
	{"cgroup/getsockname_unix", linux.BPF_PROG_TYPE_CGROUP_SOCK_ADDR, linux.BPF_CGROUP_UNIX_GETSOCKNAME, _SEC_ATTACHABLE},
	{"cgroup/sysctl", linux.BPF_PROG_TYPE_CGROUP_SYSCTL, linux.BPF_CGROUP_SYSCTL, _SEC_ATTACHABLE},
	{"cgroup/getsockopt", linux.BPF_PROG_TYPE_CGROUP_SOCKOPT, linux.BPF_CGROUP_GETSOCKOPT, _SEC_ATTACHABLE},
	{"cgroup/setsockopt", linux.BPF_PROG_TYPE_CGROUP_SOCKOPT, linux.BPF_CGROUP_SETSOCKOPT, _SEC_ATTACHABLE},
	{"cgroup/dev", linux.BPF_PROG_TYPE_CGROUP_DEVICE, linux.BPF_CGROUP_DEVICE, _SEC_ATTACHABLE_OPT},
	{"struct_ops+", linux.BPF_PROG_TYPE_STRUCT_OPS, 0, _SEC_NONE},
	{"struct_ops.s+", linux.BPF_PROG_TYPE_STRUCT_OPS, 0, _SEC_SLEEPABLE},
	{"sk_lookup", linux.BPF_PROG_TYPE_SK_LOOKUP, linux.BPF_SK_LOOKUP, _SEC_ATTACHABLE},
	{"netfilter", linux.BPF_PROG_TYPE_NETFILTER, linux.BPF_NETFILTER, _SEC_NONE},
}
